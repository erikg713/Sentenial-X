# api/controllers/exploits_controller.py
from typing import Any, Dict
from utils.response import ResponseBuilder
from pentest_suite.plugins.plugin_registry import PluginRegistry

plugin_registry = PluginRegistry()

class ExploitsController:
    """
    Controller handling exploit operations.
    """

    async def list_exploits(self) -> Any:
        try:
            plugins = plugin_registry.list_plugins()
            exploits = [
                {"name": name, "description": plugin_registry.get_plugin(name).description}
                for name in plugins
            ]
            return ResponseBuilder.success("Available exploits retrieved", {"exploits": exploits})
        except Exception as e:
            return ResponseBuilder.exception(e, context={"action": "list_exploits"})

    async def get_exploit(self, exploit_name: str) -> Any:
        try:
            plugin = plugin_registry.get_plugin(exploit_name)
            if not plugin:
                return ResponseBuilder.error(f"Exploit '{exploit_name}' not found", code=404)
            info = {
                "name": exploit_name,
                "description": plugin.description,
                "options": getattr(plugin, "options", {})
            }
            return ResponseBuilder.success("Exploit details fetched", {"exploit": info})
        except Exception as e:
            return ResponseBuilder.exception(e, context={"action": "get_exploit", "exploit_name": exploit_name})

    async def run_exploit(self, exploit_name: str, target: str, options: Dict[str, Any] = None) -> Any:
        try:
            plugin = plugin_registry.get_plugin(exploit_name)
            if not plugin:
                return ResponseBuilder.error(f"Exploit '{exploit_name}' not found", code=404)
            result = plugin.execute(target, options or {})
            return ResponseBuilder.success("Exploit executed successfully", {"result": result})
        except Exception as e:
            return ResponseBuilder.exception(e, context={
                "action": "run_exploit",
                "exploit_name": exploit_name,
                "target": target
            }) 