# sentenial-x/apps/pentest_suite/plugins/plugin_registry.py
"""
Sentenial-X Pentest Suite Plugin Registry
-----------------------------------------
Centralized registry for managing all plugins in the pentest suite.
Provides:
- Dynamic plugin discovery
- Execution management
- Result tracking
"""

import importlib
from typing import Dict, Type
from . import __all__ as plugin_list

class PluginRegistry:
    """
    Registry to store and manage pentest plugins.
    """

    def __init__(self):
        self.plugins: Dict[str, Type] = {}
        self.load_plugins()

    def load_plugins(self):
        """
        Dynamically load all plugins from the plugins package.
        """
        for plugin_name in plugin_list:
            try:
                module = importlib.import_module(f".{plugin_name.lower()}", "apps.pentest_suite.plugins")
                plugin_class = getattr(module, plugin_name)
                self.plugins[plugin_name] = plugin_class()
            except Exception as e:
                print(f"[PluginRegistry] Failed to load {plugin_name}: {e}")

    def get_plugin(self, name: str):
        """
        Retrieve a plugin instance by name.
        """
        return self.plugins.get(name)

    def execute_plugin(self, name: str, *args, **kwargs):
        """
        Execute a plugin by name with optional arguments.
        Returns plugin output or None if plugin not found.
        """
        plugin = self.get_plugin(name)
        if not plugin:
            print(f"[PluginRegistry] Plugin '{name}' not found")
            return None
        try:
            return plugin.execute(*args, **kwargs)
        except Exception as e:
            print(f"[PluginRegistry] Error executing plugin '{name}': {e}")
            return None

    def list_plugins(self):
        """
        Return a list of available plugin names.
        """
        return list(self.plugins.keys())
