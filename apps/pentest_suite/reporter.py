import json
from pathlib import Path
from typing import List, Dict, Any
import datetime
import logging

logger = logging.getLogger("PentestReporter")


class PentestReport:
    def __init__(self, report_dir: Path):
        self.report_dir = report_dir
        self.report_dir.mkdir(parents=True, exist_ok=True)
        self.entries: List[Dict[str, Any]] = []

    def add_entry(self, exploit_name: str, success: bool, stdout: str, stderr: str, returncode: int, error: str = ""):
        entry = {
            "timestamp": datetime.datetime.utcnow().isoformat(),
            "exploit_name": exploit_name,
            "success": success,
            "stdout": stdout,
            "stderr": stderr,
            "returncode": returncode,
            "error": error,
        }
        self.entries.append(entry)
        logger.debug(f"Added report entry: {exploit_name}, success={success}")

    def save_json(self, filename: str = None) -> Path:
        if filename is None:
            timestamp = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
            filename = f"pentest_report_{timestamp}.json"
        report_path = self.report_dir / filename
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(self.entries, f, indent=4)
        logger.info(f"Saved JSON report to {report_path}")
        return report_path

    def generate_summary(self) -> str:
        total = len(self.entries)
        successes = sum(1 for e in self.entries if e["success"])
        failures = total - successes

        summary = [
            f"Pentest Report Summary ({datetime.datetime.utcnow().isoformat()})",
            f"Total Exploits Run: {total}",
            f"Successful Exploits: {successes}",
            f"Failed Exploits: {failures}",
            "",
            "Detailed Results:",
        ]

        for i, entry in enumerate(self.entries, 1):
            status = "SUCCESS" if entry["success"] else "FAILURE"
            summary.append(
                f"{i}. Exploit: {entry['exploit_name']} - {status}\n"
                f"   Return Code: {entry['returncode']}\n"
                f"   Error: {entry.get('error', '')}\n"
                f"   Stdout: {entry['stdout'][:100].strip()}...\n"
                f"   Stderr: {entry['stderr'][:100].strip()}...\n"
            )
        return "\n".join(summary)

    def save_summary_txt(self, filename: str = None) -> Path:
        if filename is None:
            timestamp = datetime.datetime.utcnow().strftime("%Y%m%d_%H%M%S")
            filename = f"pentest_summary_{timestamp}.txt"
        summary_path = self.report_dir / filename
        with open(summary_path, "w", encoding="utf-8") as f:
            f.write(self.generate_summary())
        logger.info(f"Saved summary report to {summary_path}")
        return summary_path
