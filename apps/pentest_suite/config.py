import os
from pathlib import Path
from dotenv import load_dotenv
import json

# Load environment variables from .env file if available
load_dotenv()

# Root path
BASE_DIR = Path(__file__).resolve().parent
LOGS_DIR = BASE_DIR / "logs"
MODULES_DIR = BASE_DIR / "modules"
PAYLOADS_DIR = BASE_DIR / "payloads"
CONFIG_DIR = BASE_DIR / "config"
KEYS_DIR = BASE_DIR / "keys"

# Create necessary folders if missing
for directory in [LOGS_DIR, CONFIG_DIR, KEYS_DIR]:
    os.makedirs(directory, exist_ok=True)

# App Identity
APP_NAME = "Sentenial X :: Pentest Suite"
VERSION = "1.0.0-beta"
ENV = os.getenv("SENTENIAL_ENV", "development")  # development / production / testing

# Logging
LOG_LEVEL = os.getenv("SENTENIAL_LOG_LEVEL", "DEBUG")
LOG_FILE = LOGS_DIR / "pentest.log"

# Targets & Scoping
TARGETS_JSON = CONFIG_DIR / "targets.json"
EXCLUDE_JSON = CONFIG_DIR / "exclusions.json"
DEFAULT_TARGETS = ["127.0.0.1", "10.0.0.1"]

# Credentials
CREDENTIALS = {
    "ssh_user": os.getenv("SENTENIAL_SSH_USER", "pentester"),
    "ssh_key_path": KEYS_DIR / os.getenv("SENTENIAL_SSH_KEY", "id_rsa"),
    "http_user": os.getenv("SENTENIAL_HTTP_USER"),
    "http_pass": os.getenv("SENTENIAL_HTTP_PASS"),
}

# Orchestration settings
ORCHESTRATOR_API_URL = os.getenv("ORCHESTRATOR_API_URL", "http://localhost:8000/api")
ORCHESTRATOR_TOKEN = os.getenv("ORCHESTRATOR_TOKEN", "")

# Exploit & Module Configuration
EXPLOITS_DIR = MODULES_DIR / "exploits"
SCANNERS_DIR = MODULES_DIR / "scanners"
EVASION_DIR = MODULES_DIR / "evasion"
STAGERS_DIR = MODULES_DIR / "stagers"

# Scan Control
SCAN_TIMEOUT = int(os.getenv("SCAN_TIMEOUT", "60"))        # per scan task
MAX_PARALLEL_SCANS = int(os.getenv("MAX_PARALLEL_SCANS", "5"))
RETRY_LIMIT = int(os.getenv("SCAN_RETRY_LIMIT", "3"))
PORT_SCAN_RANGE = os.getenv("PORT_SCAN_RANGE", "1-1000")

# Threat Simulation
ENABLE_RANSOMWARE_SIM = os.getenv("ENABLE_RANSOMWARE_SIM", "false").lower() in ("true", "1", "yes")
ENABLE_FILELESS_PAYLOADS = os.getenv("ENABLE_FILELESS_PAYLOADS", "true").lower() in ("true", "1", "yes")

# External Intelligence APIs
VIRUSTOTAL_KEY = os.getenv("VT_API_KEY")
SHODAN_KEY = os.getenv("SHODAN_API_KEY")

# Proxy
USE_PROXY = os.getenv("USE_PROXY", "false").lower() in ("true", "1", "yes")
PROXY_URL = os.getenv("PROXY_URL")

# Email Alerts
EMAIL_ENABLED = os.getenv("EMAIL_ENABLED", "false").lower() in ("true", "1", "yes")
EMAIL_SMTP_SERVER = os.getenv("EMAIL_SMTP_SERVER", "")
EMAIL_SMTP_PORT = int(os.getenv("EMAIL_SMTP_PORT", "587"))
EMAIL_SENDER = os.getenv("EMAIL_SENDER", "")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER", "")

# Utility: Load JSON config safely
def load_json_config(file_path, fallback=None):
    try:
        with open(file_path, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return fallback if fallback is not None else []

# Get targets dynamically
def get_targets():
    return load_json_config(TARGETS_JSON, DEFAULT_TARGETS)

# Get exclusions dynamically
def get_exclusions():
    return load_json_config(EXCLUDE_JSON, [])


