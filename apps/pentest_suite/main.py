import argparse
import logging
from pathlib import Path
import sys
from exploit_runner import ExploitRunner
from config import (
    ensure_directories,
    LOG_DIR,
    VERBOSE,
    MAX_CONCURRENT_EXPLOITS,
    EXPLOIT_TIMEOUT,
)
from fastapi import FastAPI
from .sandbox import Sandbox
from pydantic import BaseModel

app = FastAPI(title="Pentest Suite")

class ScanInput(BaseModel):
    target: str

sandbox = Sandbox()

@app.post("/scan")
async def run_scan(input: ScanInput):
    return sandbox.execute("scanner", input.target)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8010)
logger = logging.getLogger("PentestMain")


def setup_logging(verbose: bool = False):
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler(LOG_DIR / "pentest.log"),
        ],
    )


def parse_args():
    parser = argparse.ArgumentParser(description="Sentenial X Pentest Suite")
    parser.add_argument(
        "--max-workers", type=int, default=MAX_CONCURRENT_EXPLOITS, help="Max concurrent exploits"
    )
    parser.add_argument(
        "--timeout", type=int, default=EXPLOIT_TIMEOUT, help="Timeout for each exploit (seconds)"
    )
    parser.add_argument(
        "--verbose", action="store_true", help="Enable verbose/debug logging"
    )
    return parser.parse_args()


def main():
    args = parse_args()
    ensure_directories()
    setup_logging(args.verbose or VERBOSE)
    logger.info("Starting Sentenial X Pentest Suite")

    runner = ExploitRunner(max_workers=args.max_workers, timeout=args.timeout)

    # Example exploit commands - replace with real payload scripts
    example_exploits = [
        ["python3", "-c", "print('Running exploit 1'); import time; time.sleep(2)"],
        ["python3", "-c", "print('Running exploit 2'); import time; time.sleep(3)"],
        ["python3", "-c", "print('Exploit 3'); import time; time.sleep(1)"],
    ]

    futures = [runner.submit_exploit(cmd) for cmd in example_exploits]
    results = runner.wait_all()

    for i, result in enumerate(results):
        if result.get("success"):
            logger.info(f"Exploit #{i + 1} succeeded:\n{result['stdout']}")
        else:
            logger.error(f"Exploit #{i + 1} failed: {result.get('error') or result.get('stderr')}")

    runner.shutdown()
    logger.info("Pentest Suite run complete.")


if __name__ == "__main__":
    main()

