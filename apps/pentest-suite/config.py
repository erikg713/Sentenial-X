import os
from pathlib import Path

# Base directory for pentest data and logs
BASE_DIR = Path(os.getenv("PENTEST_BASE_DIR", Path.home() / "sentenial_pentest"))

# Paths
LOG_DIR = BASE_DIR / "logs"
REPORT_DIR = BASE_DIR / "reports"
PAYLOADS_DIR = BASE_DIR / "payloads"

# Network scanning defaults
DEFAULT_SCAN_TIMEOUT = 10  # seconds
DEFAULT_SCAN_RETRIES = 3
DEFAULT_PORTS = [22, 80, 443, 8080]  # common ports to scan

# Exploit execution defaults
MAX_CONCURRENT_EXPLOITS = 5

# API configuration (if applicable)
API_HOST = os.getenv("PENTEST_API_HOST", "0.0.0.0")
API_PORT = int(os.getenv("PENTEST_API_PORT", "8080"))

# Logging configuration
LOG_LEVEL = os.getenv("PENTEST_LOG_LEVEL", "INFO").upper()

# Credential storage (ensure secure handling in production!)
CREDENTIAL_STORE_PATH = BASE_DIR / "credentials.json"

# Timeout for exploit scripts (seconds)
EXPLOIT_TIMEOUT = 60

# Enable verbose/debug mode
VERBOSE = os.getenv("PENTEST_VERBOSE", "false").lower() == "true"

# Other settings
MAX_SCAN_DEPTH = 3  # How deep to follow redirects or nested scans

# Ensure directories exist at startup (can be called externally)
def ensure_directories():
    for directory in [LOG_DIR, REPORT_DIR, PAYLOADS_DIR]:
        directory.mkdir(parents=True, exist_ok=True)


