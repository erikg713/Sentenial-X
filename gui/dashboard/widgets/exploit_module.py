from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QTextEdit
from PySide6.QtCore import Qt
import importlib
import traceback

class ExploitModuleWidget(QWidget):
    def __init__(self, module_name: str, display_name: str):
        super().__init__()
        self.module_name = module_name
        self.display_name = display_name

        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        self.title = QLabel(f"Exploit Module: {self.display_name}")
        self.title.setAlignment(Qt.AlignCenter)
        self.layout.addWidget(self.title)

        self.run_button = QPushButton("Run Exploit Simulation")
        self.run_button.clicked.connect(self.run_exploit)
        self.layout.addWidget(self.run_button)

        self.output_area = QTextEdit()
        self.output_area.setReadOnly(True)
        self.layout.addWidget(self.output_area)

    def run_exploit(self):
        self.output_area.clear()
        try:
            module = importlib.import_module(f"modules.exploits.{self.module_name}")
            # Expecting each exploit module to have a 'simulate' function
            if hasattr(module, "simulate"):
                output = module.simulate()
                self.output_area.append(f"[OUTPUT]\n{output}")
            else:
                self.output_area.append("Error: 'simulate' function not found in module.")
        except Exception:
            self.output_area.append("[ERROR] Exception occurred during exploit simulation:")
            self.output_area.append(traceback.format_exc())
