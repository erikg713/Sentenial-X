# gui/dashboard/widgets/exploit_module.py

from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QTextEdit, QComboBox
from PySide6.QtCore import Qt
import importlib
import traceback

class ExploitModuleWidget(QWidget):
    """
    A hybrid exploit launcher supporting static exploits (like EternalBlue) and dynamic loading
    via simulate() from other exploit modules.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setLayout(QVBoxLayout())

        self.title = QLabel("üõ†Ô∏è Exploit Launcher Panel")
        self.title.setAlignment(Qt.AlignCenter)
        self.title.setStyleSheet("font-size: 18px; font-weight: bold; margin: 8px;")
        self.layout().addWidget(self.title)

        # ComboBox to select dynamic exploit
        self.exploit_selector = QComboBox()
        self.exploit_selector.addItems([
            "ms17_010_eternalblue",
            "struts_rce"
        ])
        self.layout().addWidget(self.exploit_selector)

        # Run button
        self.run_button = QPushButton("Run Selected Exploit")
        self.run_button.clicked.connect(self.run_selected_exploit)
        self.layout().addWidget(self.run_button)

        # Terminal output area
        self.output_area = QTextEdit()
        self.output_area.setReadOnly(True)
        self.output_area.setStyleSheet("background-color: #111; color: #0f0; font-family: monospace;")
        self.layout().addWidget(self.output_area)

    def log(self, msg):
        self.output_area.append(f"> {msg}")

    def run_selected_exploit(self):
        module_name = self.exploit_selector.currentText()
        self.output_area.clear()
        try:
            module = importlib.import_module(f"modules.exploits.{module_name}")
            if hasattr(module, "simulate"):
                output = module.simulate()
                self.log(f"{module_name}.simulate() executed:")
                self.output_area.append(output)
            elif hasattr(module, "run"):
                if module_name == "ms17_010_eternalblue":
                    output = module.run("192.168.1.100")
                elif module_name == "struts_rce":
                    output = module.run("http://example.com/vulnerable")
                else:
                    output = module.run()
                self.log(f"{module_name}.run() executed:")
                self.output_area.append(output)
            else:
                self.log(f"‚ùå No suitable function found in {module_name}. Use `simulate()` or `run()`.")
        except Exception as e:
            self.log(f"üí• Error loading module {module_name}:\n{traceback.format_exc()}")
