import socket
import threading
from datetime import datetime
from sentenial_core.engine.incident_logger import log_incident
from sentenial_core.engine.alert_dispatcher import dispatch_alert

COMMON_PORTS = [21, 22, 23, 25, 53, 80, 110, 143, 443, 3306, 8080]
VULNERABLE_SERVICES = {
    21: "FTP - Anonymous access",
    23: "Telnet - Unencrypted session",
    80: "HTTP - Directory traversal",
    3306: "MySQL - Default credentials",
    8080: "Tomcat - Admin console exposed"
}

class VulnerabilityProbe:
    """
    Scans a given IP address for known vulnerabilities on common ports.
    Simulates vulnerability discovery for emulation or alert testing.
    """

    def __init__(self, target_ip: str):
        self.target_ip = target_ip
        self.results = []

    def scan_port(self, port: int):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex((self.target_ip, port))
                if result == 0:
                    vuln = VULNERABLE_SERVICES.get(port, None)
                    if vuln:
                        finding = {
                            "timestamp": datetime.utcnow().isoformat(),
                            "target": self.target_ip,
                            "port": port,
                            "vulnerability": vuln,
                            "source": "VulnerabilityProbe"
                        }
                        self.results.append(finding)
                        log_incident(finding)
                        dispatch_alert(finding)
        except Exception as e:
            print(f"[VulnerabilityProbe] Error scanning port {port}: {e}")

    def run(self):
        threads = []
        for port in COMMON_PORTS:
            t = threading.Thread(target=self.scan_port, args=(port,))
            threads.append(t)
            t.start()

        for t in threads:
            t.join()

        return self.results
