openapi: 3.0.3
info:
  title: Cortex Monorepo APIs
  description: >
    REST APIs for the Semantic Analyzer and Cortex Orchestration Engine.
    This specification contains consistent request/response schemas, error models,
    examples, recommended headers and security requirements intended for production use.
  version: 1.0.0
  contact:
    name: Sentenial-X API Support
    email: support@sentenial-x.example.com
    url: https://github.com/erikg713/Sentenial-X
  license:
    name: Apache-2.0
servers:
  - url: https://api.sentenial-x.example.com/v1
    description: Production API (recommended)
  - url: http://localhost:8081
    description: Semantic Analyzer local (dev)
  - url: http://localhost:8082
    description: Cortex Orchestration local (dev)
tags:
  - name: Semantic Analyzer
    description: Endpoints for semantic analysis and embeddings
  - name: Cortex Orchestration
    description: Decisioning and orchestration endpoints
  - name: System
    description: Health and status endpoints
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Provide a scoped API token: Authorization: Bearer <API_KEY>.
        Tokens are short-lived; rotate regularly and keep secrets safe.
  schemas:
    ErrorDetail:
      type: object
      additionalProperties: true
      description: Optional structured details for an error (field errors, validation keys).
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: validation_error
            message:
              type: string
              example: "Missing required field: text"
            details:
              $ref: '#/components/schemas/ErrorDetail'
            trace_id:
              type: string
              example: "trace-abc-123"
      description: Standardized error payload
    AnalyzeRequest:
      type: object
      required: [text]
      properties:
        text:
          type: string
          description: Raw input text to analyze (UTF-8)
          example: "User attempted unauthorized access"
    AnalysisResult:
      type: object
      properties:
        entities:
          type: array
          items:
            type: string
          description: Detected named entities or key phrases
        intent:
          type: string
          description: Top-level intent classification
        confidence:
          type: number
          format: float
          description: Confidence score between 0.0 and 1.0
        embedding_vector:
          type: array
          items:
            type: number
          description: Dense embedding vector for semantic similarity (optional)
        model_version:
          type: string
          description: Model identifier used to produce results (if available)
        trace_id:
          type: string
          description: Correlation id for observability
      example:
        entities: ["User"]
        intent: "security_breach"
        confidence: 0.93
        embedding_vector: [0.234, -0.019, 0.44]
        model_version: "semantic-v1.2.0"
        trace_id: "trace-abc-123"
    BatchAnalyzeRequest:
      type: object
      required: [documents]
      properties:
        documents:
          type: array
          items:
            type: string
          description: Array of document strings to analyze
        page:
          type: integer
          description: Page number for server-side pagination (optional)
          default: 1
        page_size:
          type: integer
          description: Items per page (optional; capped by server)
          default: 50
    BatchAnalysisResult:
      type: array
      items:
        $ref: '#/components/schemas/AnalysisResult'
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, degraded, down]
        uptime_seconds:
          type: integer
      example:
        status: ok
        uptime_seconds: 12453
    DecisionRequest:
      type: object
      required: [input]
      properties:
        input:
          type: string
          description: Contextual text or structured payload to inform decisions
          example: "unauthorized access detected"
        context:
          type: object
          additionalProperties: true
          description: Optional structured context to influence decisions (user/session metadata)
    DecisionResult:
      type: object
      properties:
        action:
          type: string
          description: Recommended action or decision name
        confidence:
          type: number
          format: float
        trace_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
      example:
        action: "alert_admin"
        confidence: 0.94
        trace_id: "dec-trace-abc-123"
        metadata:
          rule: "auto_lock_on_multiple_failures"
    BatchDecisionRequest:
      type: object
      required: [inputs]
      properties:
        inputs:
          type: array
          items:
            type: string
          description: Ordered list of inputs; response array aligns with input order
        options:
          type: object
          additionalProperties: true
          description: Optional run-time options (priority, dry_run)
    BatchDecisionResult:
      type: array
      items:
        $ref: '#/components/schemas/DecisionResult'
    StatusResponse:
      type: object
      properties:
        status:
          type: string
        services:
          type: object
          additionalProperties:
            type: string
        uptime_seconds:
          type: integer
        trace_id:
          type: string
      example:
        status: active
        services:
          semantic_analyzer: online
          decision_engine: online
          models: online
        uptime_seconds: 34823
        trace_id: status-123
  responses:
    Unauthorized:
      description: Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Invalid request payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    TooLarge:
      description: Payload exceeds allowed size
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    RateLimited:
      description: Rate limit exceeded
      headers:
        Retry-After:
          description: Seconds until the client may retry
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
security:
  - bearerAuth: []
paths:
  /analyze:
    post:
      tags:
        - Semantic Analyzer
      summary: Analyze text input
      description: Performs contextual analysis on a single text input. Returns entities, intent, confidence and optional embedding vector.
      operationId: analyzeText
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
            examples:
              simple:
                summary: Basic analyze example
                value:
                  text: "User attempted unauthorized access"
      responses:
        "200":
          description: Analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "413":
          $ref: '#/components/responses/TooLarge'
        "429":
          $ref: '#/components/responses/RateLimited'
        "500":
          $ref: '#/components/responses/ServerError'
  /batch_analyze:
    post:
      tags:
        - Semantic Analyzer
      summary: Batch text analysis
      description: >
        Analyze multiple documents in one request. Prefer this endpoint for high-throughput scenarios.
        The server will attempt to preserve input order in the result array. If input size exceeds limits, use pagination.
      operationId: batchAnalyze
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchAnalyzeRequest'
            examples:
              two_docs:
                summary: Two document batch
                value:
                  documents:
                    - "Unauthorized login attempt"
                    - "Payment failed for transaction 123"
      responses:
        "200":
          description: List of analysis results, aligned with request order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchAnalysisResult'
        "400":
          $ref: '#/components/responses/BadRequest'
        "413":
          $ref: '#/components/responses/TooLarge'
        "429":
          $ref: '#/components/responses/RateLimited'
        "500":
          $ref: '#/components/responses/ServerError'
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Lightweight health endpoint suitable for monitoring. May be unrestricted in internal deployments.
      operationId: getHealth
      responses:
        "200":
          description: Service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        "500":
          $ref: '#/components/responses/ServerError'
  /decision:
    post:
      tags:
        - Cortex Orchestration
      summary: Request decision
      description: Generates a decision based on semantic input and configured decision models. Provide optional structured context to influence rules/models.
      operationId: requestDecision
      servers:
        - url: http://localhost:8082
          description: Local Cortex service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecisionRequest'
            examples:
              basic:
                summary: Basic decision request
                value:
                  input: "unauthorized access detected"
                  context:
                    user_id: "u-123"
      responses:
        "200":
          description: Decision result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecisionResult'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/ServerError'
  /batch_decision:
    post:
      tags:
        - Cortex Orchestration
      summary: Batch decisions
      description: Evaluate multiple inputs in a single call. The response array is aligned to the request order.
      operationId: batchDecision
      servers:
        - url: http://localhost:8082
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDecisionRequest'
            examples:
              simple_batch:
                summary: Two decision inputs
                value:
                  inputs:
                    - "multiple failed login attempts"
                    - "payment declined at checkout"
                  options:
                    priority: high
      responses:
        "200":
          description: Batch decision results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDecisionResult'
        "202":
          description: Accepted for asynchronous processing. Response will include a job id (polling required).
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                    example: "job-1234"
                  trace_id:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "413":
          $ref: '#/components/responses/TooLarge'
        "429":
          $ref: '#/components/responses/RateLimited'
        "500":
          $ref: '#/components/responses/ServerError'
  /status:
    get:
      tags:
        - Cortex Orchestration
        - System
      summary: Cortex system status
      description: Returns current system status including sub-service states and uptime.
      operationId: getStatus
      servers:
        - url: http://localhost:8082
      responses:
        "200":
          description: Cortex status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          $ref: '#/components/responses/ServerError'
externalDocs:
  description: API implementation notes and examples
  url: https://github.com/erikg713/Sentenial-X/tree/main/docs
x-guidelines:
  rate_limits:
    default_per_minute: 120
    note: "Clients should implement exponential backoff with jitter and honor Retry-After on 429."
  max_payload:
    single_document_bytes: 65536
    max_batch_items: 100
  observability:
    - "All responses include a trace_id when available — log it for incident correlation."
    - "Support Idempotency-Key header for side-effecting endpoints."
