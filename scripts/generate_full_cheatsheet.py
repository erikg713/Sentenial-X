from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import os
import json

output_pdf = "SentenialX_Full_CheatSheet.pdf"
c = canvas.Canvas(output_pdf, pagesize=letter)
width, height = letter

# Title
c.setFont("Helvetica-Bold", 20)
c.drawString(50, height - 50, "Sentenial-X Full CLI & API Cheat Sheet")

# Subtitle
c.setFont("Helvetica", 12)
c.drawString(50, height - 70, "Comprehensive reference for CLI commands, API endpoints, playbooks, telemetry, and AI predictions")

# Helper function to embed diagrams
def embed_diagram(path, x, y, w, h):
    if os.path.exists(path):
        c.drawImage(ImageReader(path), x, y, width=w, height=h)
    else:
        c.setFont("Helvetica-Oblique", 10)
        c.drawString(x, y + h/2, f"[Diagram missing: {path}]")

# Embed diagrams
embed_diagram("assets/diagrams/architecture.png", 50, height - 350, 500, 250)
embed_diagram("assets/diagrams/data_flow.png", 50, height - 650, 500, 250)

# Y-position tracker
y_pos = height - 680

# CLI Commands
c.setFont("Helvetica-Bold", 14)
c.drawString(50, y_pos, "CLI Commands")
y_pos -= 20
cli_commands = [
    ("cortex", "Full AI threat analysis", 'python sentenial_cli_full.py cortex -t "log entry"'),
    ("wormgpt-detector", "Adversarial AI detection", 'python sentenial_cli_full.py wormgpt-detector -t "malicious prompt"'),
    ("simulate", "Trigger emulation playbooks", 'python sentenial_cli_full.py simulate -t "suspicious behavior"'),
    ("telemetry", "Stream telemetry logs", 'python sentenial_cli_full.py telemetry -s "network_monitor"')
]

c.setFont("Helvetica", 11)
for cmd, desc, example in cli_commands:
    if y_pos < 100:
        c.showPage()
        y_pos = height - 50
    c.drawString(60, y_pos, f"{cmd} - {desc}")
    y_pos -= 15
    c.drawString(80, y_pos, f"Example: {example}")
    y_pos -= 20

# API Endpoints
c.setFont("Helvetica-Bold", 14)
if y_pos < 120:
    c.showPage()
    y_pos = height - 50
c.drawString(50, y_pos, "API Endpoints")
y_pos -= 20
api_endpoints = [
    ("/cortex/analyze", "POST", "Full AI analysis", '{"text": "suspicious log line"}'),
    ("/wormgpt-detector", "POST", "Detect adversarial AI", '{"text": "malicious prompt"}'),
    ("/simulate", "POST", "Trigger emulation", '{"text": "suspicious behavior"}'),
    ("/alerts", "POST", "Dispatch alerts", '{"type": "ransomware","severity":"high"}')
]

c.setFont("Helvetica", 11)
for ep, method, desc, payload in api_endpoints:
    if y_pos < 100:
        c.showPage()
        y_pos = height - 50
    c.drawString(60, y_pos, f"{method} {ep} - {desc}")
    y_pos -= 15
    c.drawString(80, y_pos, f"Example Payload: {payload}")
    y_pos -= 20

# Playbooks & Simulators
c.setFont("Helvetica-Bold", 14)
if y_pos < 100:
    c.showPage()
    y_pos = height - 50
c.drawString(50, y_pos, "Playbooks & Simulators")
y_pos -= 20
playbooks = [
    ("Step 1", "wormgpt_clone", "Analyze adversarial AI input"),
    ("Step 2", "blind_spot_tracker", "Scan detection blind spots"),
    ("Step 3", "synthetic_attack_fuzzer", "Launch fuzzing attack simulation")
]

c.setFont("Helvetica", 11)
for step, sim, action in playbooks:
    if y_pos < 80:
        c.showPage()
        y_pos = height - 50
    c.drawString(60, y_pos, f"{step}: {sim} â†’ {action}")
    y_pos -= 20

# Telemetry & AI Predictions
c.setFont("Helvetica-Bold", 14)
if y_pos < 120:
    c.showPage()
    y_pos = height - 50
c.drawString(50, y_pos, "Telemetry & AI Predictions")
y_pos -= 20

sample_telemetry = [
    {
        "timestamp": "2025-09-06T12:00:00Z",
        "module": "cortex",
        "text_analysis": {"anomalies_detected": 3, "severity": "high"},
        "predictive_score": 0.87,
        "alerts_generated": ["ransomware_detected"]
    },
    {
        "timestamp": "2025-09-06T12:05:00Z",
        "module": "wormgpt_detector",
        "text_analysis": {"adversarial_detected": True},
        "predictive_score": 0.92,
        "alerts_generated": ["ai_prompt_blocked"]
    }
]

c.setFont("Helvetica", 11)
for record in sample_telemetry:
    if y_pos < 100:
        c.showPage()
        y_pos = height - 50
    record_str = json.dumps(record, indent=2)
    for line in record_str.splitlines():
        if y_pos < 50:
            c.showPage()
            y_pos = height - 50
        c.drawString(60, y_pos, line)
        y_pos -= 12
    y_pos -= 15

# Footer
c.setFont("Helvetica-Oblique", 8)
c.drawString(50, 20, "Generated by Sentenial-X Documentation Generator")

# Save PDF
c.save()
print(f"Full cheatsheet PDF with telemetry generated at {output_pdf}")
